import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import { 
  Calendar, 
  Clock, 
  User, 
  Tag, 
  ChevronRight, 
  Search, 
  TrendingUp,
  Bookmark,
  Share2,
  ThumbsUp,
  MessageCircle,
  Globe,
  Newspaper,
  GraduationCap,
  School,
  Sparkles,
  PenTool,
  Mail,
  ArrowRight,
  Filter
} from 'lucide-react';

const categories = [
  { id: "all", label: "Barchasi", icon: Newspaper },
  { id: "topik", label: "TOPIK", icon: GraduationCap },
  { id: "learning", label: "O'rganish", icon: PenTool },
  { id: "university", label: "Universitet", icon: School },
  { id: "culture", label: "Madaniyat", icon: Globe },
  { id: "tips", label: "Maslahatlar", icon: Sparkles }
];

const NewsCard = ({ post, size = "normal" }) => (
  <article className={`group cursor-pointer bg-gray-800/50 rounded-xl p-6 ${
    size === "large" ? "grid md:grid-cols-2 gap-6" : "flex flex-col"
  }`}>
    <div className={`overflow-hidden rounded-xl ${
      size === "large" ? "h-full" : "h-48 md:h-56"
    }`}>
      <img 
        src={post.coverImage || 'https://placehold.co/800x400/1a365d/ffffff?text=News'} 
        alt={post.title}
        className="w-full h-full object-cover transform transition-transform group-hover:scale-105"
      />
    </div>
    
    <div className="flex-1 py-4">
      <div className="flex items-center gap-3 mb-3">
        <span className="px-2.5 py-1 bg-blue-500 text-white rounded-full text-xs font-medium">
          {post.category}
        </span>
        <span className="text-gray-300 text-sm flex items-center gap-1">
          <Clock size={14} />
          {`${Math.ceil(post.content?.length || 0 / 1000)} min read`}
        </span>
      </div>

      <Link to={`/blog/${post._id}`}>
        <h3 className={`${
          size === "large" ? "text-2xl" : "text-lg"
        } font-bold text-white mb-2 group-hover:text-blue-400`}>
          {post.title}
        </h3>
      </Link>

      <p className="text-gray-300 mb-4 line-clamp-2">{post.excerpt}</p>

      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <img 
            src={post.author?.avatar || "/default-avatar.png"} 
            alt={post.author?.name}
            className="w-8 h-8 rounded-full"
          />
          <span className="text-sm text-gray-300">{post.author?.name}</span>
        </div>
        <div className="flex items-center gap-4 text-gray-300">
          <span className="flex items-center gap-1">
            <ThumbsUp size={16} />
            {post.likes || 0}
          </span>
          <span className="flex items-center gap-1">
            <MessageCircle size={16} />
            {post.comments?.length || 0}
          </span>
        </div>
      </div>
    </div>
  </article>
);

const Blog = () => {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [trendingTopics, setTrendingTopics] = useState([]);

  const filteredPosts = useMemo(() => {
    if (!Array.isArray(posts)) {
      return [];
    }
    return posts.filter(post => 
      post.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.excerpt?.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [posts, searchTerm]);
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const url = selectedCategory === 'all' 
          ? 'http://localhost:5000/api/blogs'
          : `http://localhost:5000/api/blogs?category=${selectedCategory}`;
        const response = await axios.get(url, { withCredentials: true });
        const data = response.data || [];
        setPosts(Array.isArray(data) ? data : []);
      } catch (err) {
        console.error('Failed to fetch blog posts:', err);
        setPosts([]);
        setError('Failed to fetch blog posts');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [selectedCategory]);

  useEffect(() => {
    const fetchTrendingTopics = async () => {
      try {
        const response = await axios.get('/api/blogs/trending-topics');
        setTrendingTopics(Array.isArray(response.data) ? response.data : []);
      } catch (err) {
        console.error('Failed to fetch trending topics:', err);
        setTrendingTopics([]);
      }
    };

    fetchTrendingTopics();
  }, []);
  if (loading) {
    return <div className="flex justify-center items-center min-h-screen">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
    </div>;
  }  if (error) {
    return <div className="text-center text-red-500 py-10">{error}</div>;
  }
  return (
    <div className="min-h-screen bg-gray-900 pt-20">
    <div className="max-w-7xl mx-auto px-4 py-8">
      {/* Search and Filter Section */}
      <div className="mb-8">
        <div className="flex flex-col md:flex-row gap-4 items-center justify-between">
          <div className="relative flex-1 w-full">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
            <input
              type="text"
              placeholder="Qidirish..."
              className="w-full pl-10 pr-4 py-2 bg-gray-800 border-gray-700 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <div className="flex gap-2 overflow-x-auto pb-2 w-full md:w-auto">
            {categories.map((cat) => (
              <button
                key={cat.id}
                onClick={() => setSelectedCategory(cat.id)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg whitespace-nowrap ${
                  selectedCategory === cat.id
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                }`}
              >
                <cat.icon size={16} />
                {cat.label}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Blog Posts */}
        <div className="lg:col-span-2">
          <div className="space-y-8">
            {filteredPosts.length > 0 ? (
              filteredPosts.map((post, index) => (
                <NewsCard 
                  key={post._id} 
                  post={post} 
                  size={index === 0 ? "large" : "normal"} 
                />
              ))
            ) : (
              <div className="text-center py-10 text-gray-500">
                No blog posts found
              </div>
            )}
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-8">
          {/* Trending Topics */}
          <div className="bg-gray-50 rounded-xl p-6">
            <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
              <TrendingUp size={20} className="text-blue-500" />
              Trenddagi Mavzular
            </h3>
            <div className="space-y-3">
              {trendingTopics.map((topic, index) => (
                <button
                  key={index}
                  className="flex items-center gap-2 text-gray-600 hover:text-blue-500 w-full text-left"
                  onClick={() => setSearchTerm(topic)}
                >
                  <Tag size={16} />
                  {topic}
                </button>
              ))}
            </div>
          </div>

          {/* Newsletter Subscription */}
          <div className="bg-blue-50 rounded-xl p-6">
            <h3 className="text-lg font-bold mb-2 flex items-center gap-2">
              <Mail size={20} className="text-blue-500" />
              Yangiliklardan xabardor bo'ling
            </h3>
            <p className="text-gray-600 mb-4">
              Eng so'nggi yangiliklarni birinchilardan bo'lib bilib turing
            </p>
            <form className="space-y-3">
              <input
                type="email"
                placeholder="Email manzilingiz"
                className="w-full px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                type="submit"
                className="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors flex items-center justify-center gap-2"
              >
                <span>Obuna bo'lish</span>
                <ArrowRight size={16} />
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Blog;
